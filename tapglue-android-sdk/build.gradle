apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 10
        versionName "2.1.2"
    }
    buildTypes {
        debug {
            testCoverageEnabled false
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->

        def variantName = variant.name.capitalize()
        def autoGenerated = ['**/R.class',
                             '**/R$*.class',
                             '**/Manifest*.*',
                             'android/**/*.*',
                             '**/BuildConfig.*',
                             '**/*$ViewBinder*.*',
                             '**/*$ViewInjector*.*',
                             '**/entities/**/*.*']

        // Run lint on each build
//        variant.assemble.dependsOn "lint$variantName"

        task("jacoco${variantName}Report", type: JacocoReport,
                dependsOn: "test${variantName}UnitTest") {
            group 'Reporting'
            description "Generate ${variantName} Jacoco coverage reports."

            reports {
                xml.enabled = true
                html.enabled = true
                html.destination "${project.buildDir}/reports/jacoco/test/html"
            }

            // variant.javaCompile.source does not work
            // traverses from starting point
            sourceDirectories = files(android.sourceSets.main.java.srcDirs)
            executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
            classDirectories = fileTree(dir: variant.javaCompiler.destinationDir,
                    excludes: autoGenerated)
        }
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}
sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.google.code.gson:gson:2.7'
    compile project(':core')
    compile 'com.android.support:appcompat-v7:25.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile('org.mockito:mockito-core:1.10.8') {
        exclude module: 'hamcrest-core'
    }

    testCompile('org.powermock:powermock-api-mockito:1.6.1') {
        exclude module: 'mockito-all'
    }
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testCompile('org.powermock:powermock-module-junit4:1.6.1') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile 'junit:junit:4.12'
}

sonarRunner {
    sonarProperties {
        property "sonar.binaries", file("${project.buildDir}/intermediates/classes/debug")
        property "sonar.tests", android.sourceSets.test.java.srcDirs
        property "sonar.sources", android.sourceSets.main.java.srcDirs
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", file("${project.buildDir}/jacoco/testDebugUnitTest.exec")
        property "sonar.sources", android.sourceSets.main.java.srcDirs
    }
}
apply plugin: 'maven'

ext {
    bintrayRepo = 'maven'
    bintrayUserOrg = 'tapglue-com'
    bintrayName = 'tapglue-android-sdk'

    publishedGroupId = 'com.tapglue.android'
    libraryName = 'Tapglue Android SDK'
    artifact = 'tapglue-android-sdk'

    libraryDescription = 'Tapglue Android SDK'

    siteUrl = 'https://github.com/tapglue/android_sdk'
    gitUrl = 'https://github.com/tapglue/android_sdk.git'

    libraryVersion = '3.0.5'

    developerId = 'tapglue'
    developerName = 'Tapglue'
    developerEmail = 'contact@tapglue.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache 2.0"]
}

apply from: rootProject.file('./tapglue-android-sdk/distribution/bintray.gradle')
apply from: rootProject.file('./tapglue-android-sdk/distribution/maven.gradle')